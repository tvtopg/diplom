Этот код представляет собой функцию `parsecells`, которая используется для анализа ячеек в таблице (предположительно, в формате Excel или подобном). Давайте разберем каждую строчку кода:

1. `def parsecells(fieldname, column, row):` - Определение функции `parsecells` с тремя параметрами: `fieldname` (ключ), `column` (колонка) и `row` (строка).

2. `elem = {}` - Создание пустого словаря `elem`, который будет заполняться данными из ячеек.

3. `if fieldname == None:` - Проверка, равен ли `fieldname` `None`. Если да, то функция возвращает пустой словарь `elem`.

4. `if fieldname[-1] != '*':` - Проверка, не заканчивается ли `fieldname` символом '*'. Если нет, то код выполняется для обычной ячейки.

    - `elem[fieldname] = sheet.cell(row=row, column=column).value` - Присваивание значению ячейки в указанной строке `row` и колонке `column` ключа `fieldname` в словаре `elem`.

5. `elif fieldname[-2:] != '**':` - Если `fieldname` заканчивается одной '*'. Это означает, что нужно обработать последовательность ячеек в столбце.

    - `i = 0` - Инициализация переменной `i` для отслеживания текущей строки.
    - `data = []` - Инициализация пустого списка `data` для хранения данных из последовательности ячеек.

    - `while sheet.cell(row=row+i, column=column).value != None and (i==0 or sheet.cell(row=row+i, column=1).value==None):` - Цикл, который продолжается, пока значение в текущей ячейке не является `None` и либо это первая итерация (i==0), либо значение в первом столбце текущей строки равно `None`.

        - `data.append(sheet.cell(row=row+i, column=column).value)` - Добавление значения текущей ячейки в список `data`.
        - `i += 1` - Увеличение `i` для перехода к следующей строке.

    - `elem[fieldname[0:-1]] = data` - Присваивание значению ключа `fieldname` в словаре `elem` списка `data`.

6. `else:` - Если `fieldname` заканчивается двумя '*'. Это означает, что нужно обработать группу ячеек и их подгруппы.

    - `i = 0` - Инициализация переменной `i` для отслеживания текущей строки.
    - `data = []` - Инициализация пустого списка `data` для хранения данных из группы ячеек.

    - `while (sheet.cell(row=row+i, column=column).value != None or sheet.cell(row=row+i+ii, column=column+1).value != None) and (i==0 or sheet.cell(row=row+i, column=1).value==None):` - Цикл, который продолжается, пока значение в текущей ячейке не является `None` или значение в следующей ячейке второго столбца не является `None`, и либо это первая итерация (i==0), либо значение в первом столбце текущей строки равно `None`.

        - `datadata = {'value':sheet.cell(row=row+i, column=column).value}` - Создание словаря `datadata` с ключом 'value', содержащим значение текущей ячейки.
        - `ii = 0` - Инициализация переменной `ii` для отслеживания текущей строки второго столбца.
        - `dataitems = []` - Инициализация пустого списка `dataitems` для хранения данных из подгруппы ячеек.

        - `while sheet.cell(row=row+i+ii, column=column+1).value != None and (ii==0 or sheet.cell(row=row+i+ii, column=column).value==None):` - Цикл, который продолжается, пока значение в текущей ячейке второго столбца не является `None` и либо это первая итерация (ii==0), либо значение в первом столбце текущей строки второго столбца равно `None`.

            - `dataitems.append(sheet.cell(row=row+i+ii, column=column+1).value)` - Добавление значения текущей ячейки второго столбца в список `dataitems`.
            - `ii += 1` - Увеличение `ii` для перехода к следующей строке второго столбца.

        - `datadata['elements'] = dataitems` - Присваивание значению ключа 'elements' в словаре `datadata` списка `dataitems`.
        - `data.append(datadata)` - Добавление словаря `datadata` в список `data`.
        - `i += ii` - Увеличение `i` на `ii` для перехода к следующей строке после обработки подгруппы ячеек.

    - `elem[fieldname[0:-2]] = data` - Присваивание значению ключа `fieldname` в словаре `elem` списка `data`.

7. `return elem` - Возврат словаря `elem` из функции.

Эта функция служит для обработки различных типов данных в ячейках таблицы и возвращает словарь с полученными данными.